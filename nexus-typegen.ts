/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./api/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ActivityInput: { // input type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    description: string; // String!
    id: number; // Int!
    status?: NexusGenEnums['ActivityStatus'] | null; // ActivityStatus
    timeouts?: number | null; // Int
    title: string; // String!
    type?: NexusGenEnums['ActivityType'] | null; // ActivityType
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  ChallengeInput: { // input type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    description: string; // String!
    endDate?: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    startDate?: NexusGenScalars['DateTime'] | null; // DateTime
    timeouts?: number | null; // Int
    title: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  InteractionInput: { // input type
    activityId: number; // Int!
    timeouts: number; // Int!
    userId: number; // Int!
  }
  ProfileInput: { // input type
    avatar: string; // String!
    bio: string; // String!
    level: string; // String!
    points: number; // Int!
  }
}

export interface NexusGenEnums {
  ActivityStatus: "CLOSED" | "COMPLETED" | "OPEN"
  ActivityType: "CYCLING" | "OTHER" | "RUNNING" | "SWIMMING" | "WALKING"
  ChallengeType: "ENVIRONMENT" | "HEALTH" | "MOBILITY" | "WASTE"
  Role: "ADMIN" | "USER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Activity: { // root type
    challengeId: number; // Int!
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    status?: NexusGenEnums['ActivityStatus'] | null; // ActivityStatus
    timeouts?: number | null; // Int
    title?: string | null; // String
    type?: NexusGenEnums['ActivityType'] | null; // ActivityType
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Challenge: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    endDate?: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    startDate?: NexusGenScalars['DateTime'] | null; // DateTime
    title?: string | null; // String
    type?: NexusGenEnums['ChallengeType'] | null; // ChallengeType
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Interaction: { // root type
    activityId: number; // Int!
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    timeouts?: number | null; // Int
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    userId: number; // Int!
  }
  Mutation: {};
  Post: { // root type
    author?: NexusGenRootTypes['User'] | null; // User
    body?: string | null; // String
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id?: number | null; // Int
    published?: boolean | null; // Boolean
    title?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Profile: { // root type
    avatar?: string | null; // String
    bio?: string | null; // String
    level?: string | null; // String
    points?: number | null; // Int
    user?: NexusGenRootTypes['User'] | null; // User
    userId?: number | null; // Int
  }
  Query: {};
  User: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    email: string; // String!
    id: number; // Int!
    name: string; // String!
    role: NexusGenEnums['Role']; // Role!
    token?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Activity: { // field return type
    challenge: NexusGenRootTypes['Challenge'] | null; // Challenge
    challengeId: number; // Int!
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    interactions: Array<NexusGenRootTypes['Interaction'] | null> | null; // [Interaction]
    status: NexusGenEnums['ActivityStatus'] | null; // ActivityStatus
    timeouts: number | null; // Int
    title: string | null; // String
    type: NexusGenEnums['ActivityType'] | null; // ActivityType
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Challenge: { // field return type
    activities: Array<NexusGenRootTypes['Activity'] | null> | null; // [Activity]
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    endDate: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    startDate: NexusGenScalars['DateTime'] | null; // DateTime
    title: string | null; // String
    type: NexusGenEnums['ChallengeType'] | null; // ChallengeType
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Interaction: { // field return type
    activity: NexusGenRootTypes['Activity'] | null; // Activity
    activityId: number; // Int!
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    timeouts: number | null; // Int
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    user: NexusGenRootTypes['User'] | null; // User
    userId: number; // Int!
  }
  Mutation: { // field return type
    addActivityToChallenge: NexusGenRootTypes['Challenge'] | null; // Challenge
    createActivity: NexusGenRootTypes['Activity'] | null; // Activity
    createChallenge: NexusGenRootTypes['Challenge'] | null; // Challenge
    createDraft: NexusGenRootTypes['Post'] | null; // Post
    createProfile: NexusGenRootTypes['Profile'] | null; // Profile
    createUser: NexusGenRootTypes['User'] | null; // User
    createUserWithProfile: NexusGenRootTypes['User'] | null; // User
    deleteActivity: NexusGenRootTypes['Activity'] | null; // Activity
    deleteChallenge: NexusGenRootTypes['Challenge'] | null; // Challenge
    deleteUser: NexusGenRootTypes['User'] | null; // User
    newInteraction: NexusGenRootTypes['Interaction'] | null; // Interaction
    publish: NexusGenRootTypes['Post'] | null; // Post
    updateActivityStatus: NexusGenRootTypes['Activity'] | null; // Activity
    updateChallenge: NexusGenRootTypes['Challenge'] | null; // Challenge
    updateProfile: NexusGenRootTypes['Profile'] | null; // Profile
    updateUser: NexusGenRootTypes['User'] | null; // User
    updateUserPoints: NexusGenRootTypes['User'] | null; // User
    updateUserProfile: NexusGenRootTypes['Profile'] | null; // Profile
  }
  Post: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    body: string | null; // String
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: number | null; // Int
    published: boolean | null; // Boolean
    title: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Profile: { // field return type
    avatar: string | null; // String
    bio: string | null; // String
    level: string | null; // String
    points: number | null; // Int
    user: NexusGenRootTypes['User'] | null; // User
    userId: number | null; // Int
  }
  Query: { // field return type
    activity: NexusGenRootTypes['Activity'] | null; // Activity
    challenge: NexusGenRootTypes['Challenge'] | null; // Challenge
    drafts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    interactions: NexusGenRootTypes['Interaction'] | null; // Interaction
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    profile: NexusGenRootTypes['Profile'] | null; // Profile
    user: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    email: string; // String!
    id: number; // Int!
    interactions: Array<NexusGenRootTypes['Interaction'] | null> | null; // [Interaction]
    name: string; // String!
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    profile: NexusGenRootTypes['Profile'] | null; // Profile
    role: NexusGenEnums['Role']; // Role!
    token: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
}

export interface NexusGenFieldTypeNames {
  Activity: { // field return type name
    challenge: 'Challenge'
    challengeId: 'Int'
    createdAt: 'DateTime'
    id: 'Int'
    interactions: 'Interaction'
    status: 'ActivityStatus'
    timeouts: 'Int'
    title: 'String'
    type: 'ActivityType'
    updatedAt: 'DateTime'
  }
  Challenge: { // field return type name
    activities: 'Activity'
    createdAt: 'DateTime'
    description: 'String'
    endDate: 'DateTime'
    id: 'Int'
    startDate: 'DateTime'
    title: 'String'
    type: 'ChallengeType'
    updatedAt: 'DateTime'
  }
  Interaction: { // field return type name
    activity: 'Activity'
    activityId: 'Int'
    createdAt: 'DateTime'
    id: 'Int'
    timeouts: 'Int'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'Int'
  }
  Mutation: { // field return type name
    addActivityToChallenge: 'Challenge'
    createActivity: 'Activity'
    createChallenge: 'Challenge'
    createDraft: 'Post'
    createProfile: 'Profile'
    createUser: 'User'
    createUserWithProfile: 'User'
    deleteActivity: 'Activity'
    deleteChallenge: 'Challenge'
    deleteUser: 'User'
    newInteraction: 'Interaction'
    publish: 'Post'
    updateActivityStatus: 'Activity'
    updateChallenge: 'Challenge'
    updateProfile: 'Profile'
    updateUser: 'User'
    updateUserPoints: 'User'
    updateUserProfile: 'Profile'
  }
  Post: { // field return type name
    author: 'User'
    body: 'String'
    createdAt: 'DateTime'
    id: 'Int'
    published: 'Boolean'
    title: 'String'
    updatedAt: 'DateTime'
  }
  Profile: { // field return type name
    avatar: 'String'
    bio: 'String'
    level: 'String'
    points: 'Int'
    user: 'User'
    userId: 'Int'
  }
  Query: { // field return type name
    activity: 'Activity'
    challenge: 'Challenge'
    drafts: 'Post'
    interactions: 'Interaction'
    posts: 'Post'
    profile: 'Profile'
    user: 'User'
  }
  User: { // field return type name
    createdAt: 'DateTime'
    email: 'String'
    id: 'Int'
    interactions: 'Interaction'
    name: 'String'
    posts: 'Post'
    profile: 'Profile'
    role: 'Role'
    token: 'String'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addActivityToChallenge: { // args
      activityId: number; // Int!
      challengeId: number; // Int!
    }
    createActivity: { // args
      challenge: number; // Int!
      description: string; // String!
      endDate: string; // String!
      points: number; // Int!
      startDate: string; // String!
      title: string; // String!
      type: NexusGenEnums['ActivityType']; // ActivityType!
    }
    createChallenge: { // args
      description: string; // String!
      endDate: string; // String!
      startDate: string; // String!
      title: string; // String!
      type: NexusGenEnums['ChallengeType']; // ChallengeType!
    }
    createDraft: { // args
      authorEmail: string; // String!
      body: string; // String!
      title: string; // String!
    }
    createProfile: { // args
      avatar: string; // String!
      bio: string; // String!
      userId: number; // Int!
    }
    createUser: { // args
      email: string; // String!
      name: string; // String!
      token: string; // String!
    }
    createUserWithProfile: { // args
      email: string; // String!
      name: string; // String!
      profile: NexusGenInputs['ProfileInput']; // ProfileInput!
      token: string; // String!
    }
    deleteActivity: { // args
      id: number; // Int!
    }
    deleteChallenge: { // args
      id: number; // Int!
    }
    deleteUser: { // args
      id: number; // Int!
    }
    newInteraction: { // args
      activityId: number; // Int!
      userId: number; // Int!
    }
    publish: { // args
      draftId: number; // Int!
    }
    updateActivityStatus: { // args
      id: number; // Int!
      status: NexusGenEnums['ActivityStatus']; // ActivityStatus!
    }
    updateChallenge: { // args
      activities: NexusGenInputs['ActivityInput']; // ActivityInput!
      id: number; // Int!
      title: string; // String!
    }
    updateProfile: { // args
      avatar: string; // String!
      bio: string; // String!
      userId: number; // Int!
    }
    updateUser: { // args
      email: string; // String!
      id: number; // Int!
      name: string; // String!
    }
    updateUserPoints: { // args
      points: number; // Int!
      userId: number; // Int!
    }
    updateUserProfile: { // args
      avatar: string; // String!
      bio: string; // String!
      id: number; // Int!
      level: string; // String!
      points: number; // Int!
    }
  }
  Query: {
    activity: { // args
      id: number; // Int!
    }
    challenge: { // args
      id: number; // Int!
    }
    interactions: { // args
      id: number; // Int!
    }
    profile: { // args
      userId: number; // Int!
    }
    user: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
}