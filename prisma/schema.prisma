// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataProxy"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  name         String
  token        String
  role         Role          @default(USER)
  profile      Profile?
  interactions Interaction[]
  posts        Post[]
}

model Profile {
  userId Int     @id
  bio    String?
  avatar String?
  points Int?
  level  String? @default(value: "beginner")
  User   User    @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  body      String
  published Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int?
}

model Challenge {
  id          Int           @id @default(autoincrement())
  type        ChallengeType
  title       String
  description String
  activities  Activity[]    
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Activity {
  id          Int            @id @default(autoincrement())
  title       String
  description String
  type        ActivityType
  status      ActivityStatus @default(OPEN)
  points      Int
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  interactions Interaction[]  
  Challenge   Challenge    @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeId Int
}

model Interaction {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  timeouts   Int
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int?
  Activity   Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId Int?
}

enum ChallengeType {
  MOBILITY
  ENVIRONMENT
  WASTE
  HEALTH
}

enum ActivityType {
  RUNNING
  CYCLING
  SWIMMING
  WALKING
  OTHER
}

enum ActivityStatus {
  OPEN
  CLOSED
  COMPLETED
}
